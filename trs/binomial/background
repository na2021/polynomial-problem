# # if p x y: if p then x else y
IF(TRUE x_ y_) = x_;
IF(FALSE x_ y_) = y_;

# insert x xs: put x in xs, so it is larger than preceding elements
INSERT(x_ NIL) = CONS(x_ NIL);
INSERT(x_ CONS(y_ z_)) = IF(GREATER(x_ y_) CONS(y_ INSERT(x_ z_)) CONS(x_ CONS(y_ z_)));

# remove x xs: remove x from xs (filter a specific element)
REMOVE(x_ NIL) = NIL;
REMOVE(x_ CONS(x_ z_)) = REMOVE(x_ z_);
REMOVE(x_ CONS(y_ z_)) = CONS(y_ REMOVE(x_ z_));

# sum xs: sum the elements of xs
SUM(NIL) = DIGIT(0);
SUM(CONS(x_ y_)) = PLUS(x_ SUM(y_));

# add x xs: add x to each element in xs
ADD(DIGIT(0) xs_) = xs_;
ADD(x_ NIL) = NIL;
ADD(x_ CONS(y_ z_)) = CONS(PLUS(x_ y_) ADD(x_ z_));

# count x xs: how many times does x appear in xs?
COUNT(t_ NIL) = DIGIT(0);
COUNT(u_ CONS(u_ w_)) = PLUS(DIGIT(1) COUNT(u_ w_));
COUNT(x_ CONS(y_ z_)) = COUNT(x_ z_);

# nth n xs: give item n in xs
NTH(DIGIT(0) CONS(x_ y_)) = x_;
NTH(n_ CONS(x_ y_)) = NTH(MINUS(n_ DIGIT(1)) y_);

# even x: true if x is even else false
EVEN(DIGIT(0)) = TRUE;
EVEN(DIGIT(2)) = TRUE;
EVEN(DIGIT(4)) = TRUE;
EVEN(DIGIT(6)) = TRUE;
EVEN(DIGIT(8)) = TRUE;
EVEN(DECC(x_ y_)) = EVEN(DIGIT(y_));
EVEN(x_) = FALSE;

# greater x y: true if x > y else false
GREATER(DIGIT(x_) DIGIT(y_)) = GREATERDIGIT(x_ y_);
GREATER(DIGIT(x_) DECC(y_ z_)) = IF(GREATER(y_ DIGIT(0)) FALSE GREATERDIGIT(x_ z_));
GREATER(DECC(x_ y_) DIGIT(z_)) = IF(GREATER(x_ DIGIT(0)) TRUE  GREATERDIGIT(y_ z_));
GREATER(DECC(w_ x_) DECC(y_ z_)) = IF(GREATER(w_ y_) TRUE IF(GREATER(y_ w_) FALSE GREATERDIGIT(x_ z_)));

# greater_digit x y: true if x > y else false
GREATERDIGIT(0 y_) = FALSE;
GREATERDIGIT(x_ 0) = TRUE;
GREATERDIGIT(1 y_) = FALSE;
GREATERDIGIT(x_ 1) = TRUE;
GREATERDIGIT(2 y_) = FALSE;
GREATERDIGIT(x_ 2) = TRUE;
GREATERDIGIT(3 y_) = FALSE;
GREATERDIGIT(x_ 3) = TRUE;
GREATERDIGIT(4 y_) = FALSE;
GREATERDIGIT(x_ 4) = TRUE;
GREATERDIGIT(5 y_) = FALSE;
GREATERDIGIT(x_ 5) = TRUE;
GREATERDIGIT(6 y_) = FALSE;
GREATERDIGIT(x_ 6) = TRUE;
GREATERDIGIT(7 y_) = FALSE;
GREATERDIGIT(x_ 7) = TRUE;
GREATERDIGIT(8 y_) = FALSE;
GREATERDIGIT(x_ 8) = TRUE;
GREATERDIGIT(9 y_) = FALSE;
GREATERDIGIT(x_ 9) = TRUE;

# plus x y: x + y
PLUS(DIGIT(0) y_) = y_;
PLUS(x_ DIGIT(0)) = x_;
PLUS(DIGIT(1) DIGIT(1)) = DIGIT(2);
PLUS(DIGIT(1) DIGIT(2)) = DIGIT(3);
PLUS(DIGIT(1) DIGIT(3)) = DIGIT(4);
PLUS(DIGIT(1) DIGIT(4)) = DIGIT(5);
PLUS(DIGIT(1) DIGIT(5)) = DIGIT(6);
PLUS(DIGIT(1) DIGIT(6)) = DIGIT(7);
PLUS(DIGIT(1) DIGIT(7)) = DIGIT(8);
PLUS(DIGIT(1) DIGIT(8)) = DIGIT(9);
PLUS(DIGIT(1) DIGIT(9)) = DECC(DIGIT(1) 0);
PLUS(DIGIT(2) DIGIT(1)) = DIGIT(3);
PLUS(DIGIT(2) DIGIT(2)) = DIGIT(4);
PLUS(DIGIT(2) DIGIT(3)) = DIGIT(5);
PLUS(DIGIT(2) DIGIT(4)) = DIGIT(6);
PLUS(DIGIT(2) DIGIT(5)) = DIGIT(7);
PLUS(DIGIT(2) DIGIT(6)) = DIGIT(8);
PLUS(DIGIT(2) DIGIT(7)) = DIGIT(9);
PLUS(DIGIT(2) DIGIT(8)) = DECC(DIGIT(1) 0);
PLUS(DIGIT(2) DIGIT(9)) = DECC(DIGIT(1) 1);
PLUS(DIGIT(3) DIGIT(1)) = DIGIT(4);
PLUS(DIGIT(3) DIGIT(2)) = DIGIT(5);
PLUS(DIGIT(3) DIGIT(3)) = DIGIT(6);
PLUS(DIGIT(3) DIGIT(4)) = DIGIT(7);
PLUS(DIGIT(3) DIGIT(5)) = DIGIT(8);
PLUS(DIGIT(3) DIGIT(6)) = DIGIT(9);
PLUS(DIGIT(3) DIGIT(7)) = DECC(DIGIT(1) 0);
PLUS(DIGIT(3) DIGIT(8)) = DECC(DIGIT(1) 1);
PLUS(DIGIT(3) DIGIT(9)) = DECC(DIGIT(1) 2);
PLUS(DIGIT(4) DIGIT(1)) = DIGIT(5);
PLUS(DIGIT(4) DIGIT(2)) = DIGIT(6);
PLUS(DIGIT(4) DIGIT(3)) = DIGIT(7);
PLUS(DIGIT(4) DIGIT(4)) = DIGIT(8);
PLUS(DIGIT(4) DIGIT(5)) = DIGIT(9);
PLUS(DIGIT(4) DIGIT(6)) = DECC(DIGIT(1) 0);
PLUS(DIGIT(4) DIGIT(7)) = DECC(DIGIT(1) 1);
PLUS(DIGIT(4) DIGIT(8)) = DECC(DIGIT(1) 2);
PLUS(DIGIT(4) DIGIT(9)) = DECC(DIGIT(1) 3);
PLUS(DIGIT(5) DIGIT(1)) = DIGIT(6);
PLUS(DIGIT(5) DIGIT(2)) = DIGIT(7);
PLUS(DIGIT(5) DIGIT(3)) = DIGIT(8);
PLUS(DIGIT(5) DIGIT(4)) = DIGIT(9);
PLUS(DIGIT(5) DIGIT(5)) = DECC(DIGIT(1) 0);
PLUS(DIGIT(5) DIGIT(6)) = DECC(DIGIT(1) 1);
PLUS(DIGIT(5) DIGIT(7)) = DECC(DIGIT(1) 2);
PLUS(DIGIT(5) DIGIT(8)) = DECC(DIGIT(1) 3);
PLUS(DIGIT(5) DIGIT(9)) = DECC(DIGIT(1) 4);
PLUS(DIGIT(6) DIGIT(1)) = DIGIT(7);
PLUS(DIGIT(6) DIGIT(2)) = DIGIT(8);
PLUS(DIGIT(6) DIGIT(3)) = DIGIT(9);
PLUS(DIGIT(6) DIGIT(4)) = DECC(DIGIT(1) 0);
PLUS(DIGIT(6) DIGIT(5)) = DECC(DIGIT(1) 1);
PLUS(DIGIT(6) DIGIT(6)) = DECC(DIGIT(1) 2);
PLUS(DIGIT(6) DIGIT(7)) = DECC(DIGIT(1) 3);
PLUS(DIGIT(6) DIGIT(8)) = DECC(DIGIT(1) 4);
PLUS(DIGIT(6) DIGIT(9)) = DECC(DIGIT(1) 5);
PLUS(DIGIT(7) DIGIT(1)) = DIGIT(8);
PLUS(DIGIT(7) DIGIT(2)) = DIGIT(9);
PLUS(DIGIT(7) DIGIT(3)) = DECC(DIGIT(1) 0);
PLUS(DIGIT(7) DIGIT(4)) = DECC(DIGIT(1) 1);
PLUS(DIGIT(7) DIGIT(5)) = DECC(DIGIT(1) 2);
PLUS(DIGIT(7) DIGIT(6)) = DECC(DIGIT(1) 3);
PLUS(DIGIT(7) DIGIT(7)) = DECC(DIGIT(1) 4);
PLUS(DIGIT(7) DIGIT(8)) = DECC(DIGIT(1) 5);
PLUS(DIGIT(7) DIGIT(9)) = DECC(DIGIT(1) 6);
PLUS(DIGIT(8) DIGIT(1)) = DIGIT(9);
PLUS(DIGIT(8) DIGIT(2)) = DECC(DIGIT(1) 0);
PLUS(DIGIT(8) DIGIT(3)) = DECC(DIGIT(1) 1);
PLUS(DIGIT(8) DIGIT(4)) = DECC(DIGIT(1) 2);
PLUS(DIGIT(8) DIGIT(5)) = DECC(DIGIT(1) 3);
PLUS(DIGIT(8) DIGIT(6)) = DECC(DIGIT(1) 4);
PLUS(DIGIT(8) DIGIT(7)) = DECC(DIGIT(1) 5);
PLUS(DIGIT(8) DIGIT(8)) = DECC(DIGIT(1) 6);
PLUS(DIGIT(8) DIGIT(9)) = DECC(DIGIT(1) 7);
PLUS(DIGIT(9) DIGIT(1)) = DECC(DIGIT(1) 0);
PLUS(DIGIT(9) DIGIT(2)) = DECC(DIGIT(1) 1);
PLUS(DIGIT(9) DIGIT(3)) = DECC(DIGIT(1) 2);
PLUS(DIGIT(9) DIGIT(4)) = DECC(DIGIT(1) 3);
PLUS(DIGIT(9) DIGIT(5)) = DECC(DIGIT(1) 4);
PLUS(DIGIT(9) DIGIT(6)) = DECC(DIGIT(1) 5);
PLUS(DIGIT(9) DIGIT(7)) = DECC(DIGIT(1) 6);
PLUS(DIGIT(9) DIGIT(8)) = DECC(DIGIT(1) 7);
PLUS(DIGIT(9) DIGIT(9)) = DECC(DIGIT(1) 8);
PLUS(DIGIT(z_) DECC(x_ y_)) = PLUS(DECC(x_ y_) DIGIT(z_));
PLUS(DECC(x_ y_) DIGIT(z_)) = CARRY(x_ PLUS(DIGIT(y_) DIGIT(z_)));
PLUS(DECC(w_ x_) DECC(y_ z_)) = CARRY(PLUS(w_ y_) PLUS(DIGIT(x_) DIGIT(z_)));

# carry x y: manage the carry in addition 
CARRY(x_ DIGIT(a_)) = DECC(x_ a_);
CARRY(x_ DECC(a_ b_)) = DECC(PLUS(x_ a_) b_);

# minus x y: x - y
MINUS(x_ DIGIT(0)) = x_;
MINUS(DIGIT(0) x_) = DIGIT(0);
MINUS(DIGIT(x_) DIGIT(y_)) = DIGIT(MINUSDIGIT(x_ y_));
MINUS(DIGIT(x_) DECC(y_ z_)) = IF(GREATER(y_ DIGIT(0)) DIGIT(0) DIGIT(MINUSDIGIT(x_ z_)));
MINUS(DECC(x_ y_) DIGIT(z_)) = IF(GREATERDIGIT(z_ y_) BORROW(x_ y_ z_) DECC(x_ MINUSDIGIT(y_ z_)));
MINUS(DECC(w_ x_) DECC(y_ z_)) = IF(GREATERDIGIT(z_ x_) BORROW(MINUS(w_ y_) x_ z_) DECC(MINUS(w_ y_) MINUSDIGIT(x_ z_)));

BORROW(DIGIT(1) y_ z_) = DIGIT(MINUSDIGIT(9 MINUSDIGIT(MINUSDIGIT(z_ y_) 1)));
BORROW(x_ y_ z_) = DECC(MINUS(x_ DIGIT(1)) MINUSDIGIT(9 MINUSDIGIT(MINUSDIGIT(z_ y_) 1)));

# minus_digit x y: x - y
MINUSDIGIT(2 1) = 1;
MINUSDIGIT(3 1) = 2;
MINUSDIGIT(3 2) = 1;
MINUSDIGIT(4 1) = 3;
MINUSDIGIT(4 2) = 2;
MINUSDIGIT(4 3) = 1;
MINUSDIGIT(5 1) = 4;
MINUSDIGIT(5 2) = 3;
MINUSDIGIT(5 3) = 2;
MINUSDIGIT(5 4) = 1;
MINUSDIGIT(6 1) = 5;
MINUSDIGIT(6 2) = 4;
MINUSDIGIT(6 3) = 3;
MINUSDIGIT(6 4) = 2;
MINUSDIGIT(6 5) = 1;
MINUSDIGIT(7 1) = 6;
MINUSDIGIT(7 2) = 5;
MINUSDIGIT(7 3) = 4;
MINUSDIGIT(7 4) = 3;
MINUSDIGIT(7 5) = 2;
MINUSDIGIT(7 6) = 1;
MINUSDIGIT(8 1) = 7;
MINUSDIGIT(8 2) = 6;
MINUSDIGIT(8 3) = 5;
MINUSDIGIT(8 4) = 4;
MINUSDIGIT(8 5) = 3;
MINUSDIGIT(8 6) = 2;
MINUSDIGIT(8 6) = 1;
MINUSDIGIT(9 1) = 8;
MINUSDIGIT(9 2) = 7;
MINUSDIGIT(9 3) = 6;
MINUSDIGIT(9 4) = 5;
MINUSDIGIT(9 5) = 4;
MINUSDIGIT(9 6) = 3;
MINUSDIGIT(9 7) = 2;
MINUSDIGIT(9 8) = 1;
MINUSDIGIT(x_ y_) = 0;

# recursive definition of multiplication

MULTI(x_ y_) = ADD(x_ MULTI(x_ MINUS(y_ 1)));
MULTI(x_ 1) = x_;
MULTI(x_ 0) = 0;
MULTI(1 y_) = y_;
MULTI(0 y_) = 0;

SQUARE(x_) = MULTI(x_ x_);
